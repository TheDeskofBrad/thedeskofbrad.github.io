<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Brad Thornborrow</title><link>https://thedeskofbrad.ca/posts/</link><description>Recent content in Posts on Brad Thornborrow</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 30 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://thedeskofbrad.ca/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Building i3-gaps and i3status from source</title><link>https://thedeskofbrad.ca/posts/2022/01/building-i3-gaps-and-i3status-from-source/</link><pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate><guid>https://thedeskofbrad.ca/posts/2022/01/building-i3-gaps-and-i3status-from-source/</guid><description>Recently, I have become a great fan of i3-gaps as my Window Manager of choice when using Raspbian. Unfortunately, the Raspbian images do not include i3-gaps nor the latest versions of some other i3 utilities.
To work around this issue, the packages must be built from source, as shown below (pulled together from several other posts found elsewhere and my own troubleshooting).
Install i3-gaps build dependencies:
sudo apt install meson dh-autoreconf libxcb-keysyms1-dev libpango1.</description><content type="html"><![CDATA[<p>Recently, I have become a great fan of <strong>i3-gaps</strong> as my Window Manager of choice when using Raspbian. Unfortunately, the Raspbian images do not include <strong>i3-gaps</strong> nor the latest versions of some other i3 utilities.</p>
<p>To work around this issue, the packages must be built from source, as shown below (pulled together from several other posts found elsewhere and my own troubleshooting).</p>
<ol>
<li>
<p>Install <strong>i3-gaps</strong> build dependencies:</p>
<pre tabindex="0"><code>sudo apt install meson dh-autoreconf libxcb-keysyms1-dev libpango1.0-dev libxcb-util0-dev xcb libxcb1-dev libxcb-icccm4-dev libyajl-dev libev-dev libxcb-xkb-dev libxcb-cursor-dev libxkbcommon-dev libxcb-xinerama0-dev libxkbcommon-x11-dev libstartup-notification0-dev libxcb-randr0-dev libxcb-xrm0 libxcb-xrm-dev libxcb-shape0 libxcb-shape0-dev
</code></pre></li>
<li>
<p>Download <strong>i3-gaps</strong> from the <strong>Regolith-Linux</strong> repository, build and install in <code>/usr/local</code>. This is not the primary repo for <strong>i3-gaps</strong>, but it is being actively maintained, so I use it for my builds:</p>
<pre tabindex="0"><code>git clone https://github.com/regolith-linux/i3-gaps-wm.git
cd i3-gaps
mkdir -p build &amp;&amp; cd build
meson --prefix /usr/local
ninja
sudo ninja install
</code></pre></li>
<li>
<p>Remove the original i3 installation package:</p>
<p><code>sudo apt remove i3-wm</code></p>
</li>
<li>
<p>If using the <strong>LightDM</strong> session manager, edit <code>/etc/lightdm/lightdm.conf</code>, adding <code>/usr/local/share/xsessions</code> to the session-directory search path.</p>
</li>
<li>
<p>Logout and login to start using <strong>i3-gaps</strong>.</p>
</li>
</ol>
<h3 id="build-updated-i3status-from-source-optional">Build updated i3status from source (optional)</h3>
<p>Older versions of the <strong>i3status</strong> tool can encounter issues when running on <strong>Raspbian</strong>. For example, it can display incorrect memory values. If this occurs, the latest version must be built from source to replace the default <strong>Raspbian</strong> package.</p>
<ol>
<li>
<p>Install <strong>i3status</strong> build dependencies:</p>
<pre tabindex="0"><code>sudo apt install libconfuse-dev libyajl-dev libasound2-dev libiw-dev libpulse-dev libnl-genl-3-dev
</code></pre></li>
<li>
<p>Download <strong>i3status</strong> repository, build and install in <code>/usr/local</code>:</p>
<pre tabindex="0"><code>git clone https://github.com/i3/i3status.git
cd i3status
mkdir -p build &amp;&amp; cd build
meson --prefix /usr/local
ninja
sudo ninja install
</code></pre></li>
<li>
<p>Remove original <strong>i3status</strong> installation package:</p>
<p><code>sudo apt remove i3status</code></p>
</li>
</ol>
<h3 id="fix-i3--i3status-package-dependencies">Fix i3 / i3status package dependencies</h3>
<ol>
<li>
<p>Lastly, after removing the default i3-wm and/or i3status packages, some dependencies may be broken.</p>
</li>
<li>
<p>If any i3 dependencies are listed as <strong>no longer required</strong> when running <code>sudo apt upgrade</code>, use this command to mark them as manually installed to avoid removing them in error:</p>
<pre tabindex="0"><code>sudo apt-mark manual &lt;package_names&gt;
</code></pre></li>
</ol>
<p>I drafted this post primarily for my own reference but if you found it helpful, you’re welcome ツ. To contact me, please use the <a href="/contact">Contact</a>
 page, or send me a direct message on <a href="https://twitter.com/TheDeskofBrad" target="_blank">Twitter</a>
.</p>
<p>Take care.</p>
]]></content></item><item><title>Setup a Git 'dotfiles' repository</title><link>https://thedeskofbrad.ca/posts/2021/12/setup-a-git-dotfiles-repository/</link><pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate><guid>https://thedeskofbrad.ca/posts/2021/12/setup-a-git-dotfiles-repository/</guid><description>This post covers the the basic steps to backup and sync your Linux system config files (a.k.a. dotfiles) using a Git bare repository. The process is based on an article I found at Atlassian which details the full process.
To set things up, use the following console commands to create a bare Git repository and the dotfiles alias.
git init --bare $HOME/.dotfiles alias dotfiles=&amp;#39;/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME&amp;#39; dotfiles config --local status.showUntrackedFiles no Once this is done, the following code must be added to the .</description><content type="html"><![CDATA[<p>This post covers the the basic steps to backup and sync your Linux system config files (a.k.a. <code>dotfiles</code>) using a <strong>Git bare repository</strong>. The process is based on an article I found at <a href="https://www.atlassian.com/git/tutorials/dotfiles" target="_blank">Atlassian</a>
 which details the full process.</p>
<p>To set things up, use the following console commands to create a bare Git repository and the <code>dotfiles</code> alias.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git init --bare $HOME/.dotfiles
</span></span><span style="display:flex;"><span>alias dotfiles<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME&#39;</span>
</span></span><span style="display:flex;"><span>dotfiles config --local status.showUntrackedFiles no
</span></span></code></pre></div><p>Once this is done, the following code must be added to the <code>.bashrc</code> file in your home directory. This command recreates the <code>dotfiles</code> alias on each login.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Add alias for git dotfiles sync command</span>
</span></span><span style="display:flex;"><span>alias dotfiles<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME&#39;</span>
</span></span></code></pre></div><p>After the <code>.dotfiles</code> repo has been created, all standard git operations are permitted, using <code>dotfiles</code> instead of <code>git</code>. For example, the following commands will add the <code>.bashrc</code> file to your <code>dotfiles</code> repository and commit the changes:</p>
<pre tabindex="0"><code>dotfiles add ~/.bashrc
dotfiles commit -am &#34;Add .bashrc&#34; 
</code></pre><p>To backup your config files remotely and sync with other systems, first setup a Git repository on your platform of choice (e.g. <a href="https://github.com" target="_blank">GitHub</a>
). Once this is done, the following commands will connect the remote repo and push the contents.</p>
<pre tabindex="0"><code>dotfiles remote add origin git@github.com:yourname/blank-repo.git 
dotfiles push -u origin master
</code></pre><p>When setting up new systems, you can pull down your config files using a similar process. First, follow the initial steps to setup the bare repo and <code>dotfile</code> sync alias. After this is done, follow these commands to connect the remote repository and pull down the last saved config.</p>
<pre tabindex="0"><code>dotfiles remote add origin git@github.com:yourname/repo-name.git 
dotfiles pull origin master
</code></pre><p>Once checked out locally, everything works the same to add, update or delete configuration files and push the changes. This will also allow you to pull down any changes to your other systems, keeping them in sync.</p>
<p>I drafted this post primarily for my own reference but if you found it helpful, you&rsquo;re welcome ツ. To contact me, please use the <a href="/contact">Contact</a>
 page, or send me a direct message on <a href="https://twitter.com/TheDeskofBrad" target="_blank">Twitter</a>
.</p>
<p>Take care.</p>
]]></content></item></channel></rss>